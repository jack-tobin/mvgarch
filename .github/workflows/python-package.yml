name: CI and Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pytest
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest  # or use the command specific to your test suite

  # Job 2: Bump version
  bump-version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_sha: ${{ steps.commit.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Bump version
        run: |
          # read the current version
          current_version=$(cat pyproject.toml | grep version | head -n 1 | awk -F' = ' '{print $2}' | sed 's/"//g')
          echo "Current version: $current_version"
          # Split version and increment patch
          IFS='.' read -r major minor patch <<< "$current_version"
          new_patch=$((patch + 1))
          new_version="${major}.${minor}.${new_patch}"
          echo "New version: $new_version"
          # Update pyproject.toml
          sed -i "s/^version = .*/version = \"$new_version\"/" pyproject.toml

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "Bump version to $new_version"
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT  # Store the commit SHA
          git push

      - name: Wait for push to complete
        run: |
          sleep 10  # Give GitHub a moment to process the push

  # Job 3: Build and Publish to PyPI
  publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, bump-version]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.bump-version.outputs.new_sha }}  # Use the SHA from bump-version job

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build the package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
